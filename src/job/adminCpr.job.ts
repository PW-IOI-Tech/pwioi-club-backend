import { prisma } from "../db/prisma.js";
import { sendEmail } from "../service/email.service.js"; 
import { getOngoingSubjectsForSchool, calculateCprSummaryForSubject } from "../service/cpr.service.js"; 
export async function sendAdminWeeklyCprReport() {
  console.log("Starting Admin Weekly CPR Report job...");

  const adminRecipients = process.env.ADMIN_EMAIL_RECIPIENTS;

  if (!adminRecipients) {
    console.error("ADMIN_EMAIL_RECIPIENTS environment variable not set. Aborting job.");
    return;
  }

  const adminEmailList = adminRecipients.split(',').map(email => email.trim());
  if (adminEmailList.length === 0) {
    console.log("No admin recipients configured.");
    return;
  }

  const allCenters = await prisma.center.findMany({
    include: {
      schools: true,
    },
    orderBy: { name: 'asc' }
  });

  const reportData = [];

  for (const center of allCenters) {
    const centerData = { name: center.name, schools: [] as any[] };

    for (const school of center.schools) {
      const ongoingSubjects = await getOngoingSubjectsForSchool(center.id, school.id);
      const schoolData = { name: school.name, subjects: [] as any[] };

      for (const subject of ongoingSubjects) {
        const cprModules = await prisma.cprModule.findMany({
            where: { subject_id: subject.id },
            include: { topics: { include: { subTopics: true } } }
        });
        const summary = calculateCprSummaryForSubject(cprModules, subject);
        schoolData.subjects.push(summary);
      }

      if (schoolData.subjects.length > 0) {
        centerData.schools.push(schoolData);
      }
    }
    
    if (centerData.schools.length > 0) {
        reportData.push(centerData);
    }
  }

  if (reportData.length > 0) {
    const reportHtml = buildAdminReportHtml(reportData);
    const today = new Date();

    await sendEmail({
      to: adminEmailList,
      subject: `Weekly CPR Progress Report - ${today.toLocaleDateString()}`,
      htmlBody: reportHtml,
    });
  } else {
    console.log("No ongoing subjects found to report.");
  }

  console.log("Admin Weekly CPR Report job finished.");
}

function buildAdminReportHtml(data: any[]): string {
  let reportBody = "";

  for (const center of data) {
    reportBody += `<h2 style="color: #333; border-bottom: 2px solid #eee; padding-bottom: 5px;">${center.name}</h2>`;
    for (const school of center.schools) {
      reportBody += `<h3 style="color: #555; margin-left: 20px;">${school.name}</h3>`;
      reportBody += `<table style="width: 90%; margin-left: 40px; border-collapse: collapse; margin-bottom: 20px;">
        <thead style="background-color: #f2f2f2;">
          <tr>
            <th style="padding: 8px; border: 1px solid #ddd; text-align: left;">Subject</th>
            <th style="padding: 8px; border: 1px solid #ddd; text-align: center;">Expected Lectures</th>
            <th style="padding: 8px; border: 1px solid #ddd; text-align: center;">Actual Lectures</th>
            <th style="padding: 8px; border: 1px solid #ddd; text-align: center;">Lag/Lead</th>
          </tr>
        </thead>
        <tbody>
      `;
      for (const subject of school.subjects) {
        const lagColor = subject.completion_lag > 1 ? '#D32F2F' : (subject.completion_lag < -1 ? '#388E3C' : '#333');
        reportBody += `
          <tr>
            <td style="padding: 8px; border: 1px solid #ddd;">${subject.subject_name} (${subject.teacher_name})</td>
            <td style="padding: 8px; border: 1px solid #ddd; text-align: center;">${subject.expected_completion_lecture}</td>
            <td style="padding: 8px; border: 1px solid #ddd; text-align: center;">${subject.actual_completion_lecture}</td>
            <td style="padding: 8px; border: 1px solid #ddd; text-align: center; font-weight: bold; color: ${lagColor};">
              ${subject.completion_lag > 0 ? `${subject.completion_lag} behind` : `${Math.abs(subject.completion_lag)} ahead`}
            </td>
          </tr>
        `;
      }
      reportBody += `</tbody></table>`;
    }
  }

  return `
    <div style="font-family: Arial, sans-serif; line-height: 1.6;">
      <h1>Weekly CPR Progress Report</h1>
      <p>Here is the summary of course progress for all ongoing subjects as of ${new Date().toDateString()}.</p>
      <hr>
      ${reportBody}
      <hr>
      <p style="font-size: 12px; color: #888;">This is an automated report generated by the CPR Notification System.</p>
    </div>
  `;
}
